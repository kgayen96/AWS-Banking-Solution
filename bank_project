AWSTemplateFormatVersion: "2010-09-09"
Description: This is a banking app using S3, Lambda, API Gateway, RDS, DynamoDB, and SQL

Parameters:
  BucketNameParameter:
    Type: String
    Description: Enter the name of S3 bucket

  LambdaRoleNameParameter:
    Type: String
    Description: Enter the name of Lambda IAM Role

  LambdaRuntimeParameter:
    Type: String
    Default: python3.9
    AllowedValues:
      - python3.9
      - python3.8
      - python3.7
    Description: Enter the Lambda Runtime

  RESTAPINameParameter:
    Type: String
    Description: Enter the name of REST API

  APIStageParameter:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - QA
      - Prod
    Description: Enter the value of API Stage

  RDSEngineParameter:
    Type: String
    Default: mysql
    AllowedValues:
      - mysql
      - postgres
      - sqlserver
    Description: Enter the RDS database engine

  RDSInstanceClassParameter:
    Type: String
    Default: db.t2.micro
    Description: Enter the RDS instance class

  RDSAllocatedStorageParameter:
    Type: Number
    Default: 20
    Description: Enter the allocated storage for RDS (in GB)

  RDSUsernameParameter:
    Type: String
    Default: admin
    Description: Enter the RDS master username

  RDSMasterUserPasswordParameter:
    Type: String
    Default: adminpassword
    Description: Enter the RDS master user password

  RDSInstanceIdentifierParameter:
    Type: String
    Default: MyRDSInstance
    Description: Enter the RDS instance identifier

Resources:
  bankingS3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameParameter

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role for Lambda to access S3
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Ref LambdaRoleNameParameter

  Lambdafunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: !Ref LambdaRuntimeParameter
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3

          client = boto3.client('s3')

          def lambda_handler(event, context):
              response = client.get_object(
                  Bucket='balancestatus062301',
                  Key='accountBalance.json',
              )

              # convert from streaming data to bytes
              data_byte = response['Body'].read()
              # convert from bytes to strings
              data_string = data_byte.decode("UTF-8")
              # convert from JSON string to dictionary
              data_dict = json.loads(data_string)

              return {
                  'statusCode': 200,
                  'body': json.dumps(data_dict),
                  'headers': {'Content-Type': 'application/json'},
              }
      Description: API Gateway Lambda S3 
      Timeout : 60

  bankingRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref RESTAPINameParameter

  bankingstatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt bankingRESTAPI.RootResourceId
      PathPart: balanceStatus01
      RestApiId: !Ref bankingRESTAPI

  bankingstatusMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      ResourceId: !Ref bankingstatusResource
      HttpMethod: GET
      MethodResponses:
        - StatusCode: 200
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/${Lambdafunction.Arn}/invocations'

  APIDeployment:
    DependsOn: bankingstatusMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      Description: My deployment to Prod
      StageName: !Ref APIStageParameter

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambdafunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 873072715603

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref RDSAllocatedStorageParameter
      DBInstanceClass: !Ref RDSInstanceClassParameter
      Engine: !Ref RDSEngineParameter
      EngineVersion: 5.7  # Modify as needed
      MasterUsername: !Ref RDSUsernameParameter
      MasterUserPassword: !Ref RDSMasterUserPasswordParameter
      DBInstanceIdentifier: !Ref RDSInstanceIdentifierParameter

  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: BankingAppTable
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
